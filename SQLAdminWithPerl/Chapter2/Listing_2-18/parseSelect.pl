# This script shows the use of the module Parse::RecDescent.
# It's limited to parse simple SELECT statements. 
# Note that the grammar defined here for the SELECT statement
# is significantly simpler than what T-SQL supports. The main
# focus here is to demonstrate the Parse::RecDescent module, 
# not to produce a practical parser for the T-SQL SELECT statement.

use strict;
use Parse::RecDescent;
use Data::Dumper;

# Define the grammar inside the new() method, and generate the parser
# for the grammar.
my $parser = Parse::RecDescent->new(q{
   query :         select_query end_of_str { $item[1] }
   select_query :  select_clause from_clause where_clause(?)
                                          { { SELECT => $item[1], 
                                              FROM   => $item[2],
                                              WHERE  => $item[3] } }

   select_clause : /SELECT/i  select_item(s /,/)  { $item[2] }
   select_item :   /(\*|\w+\.\*)/         { $item[1] } 
                 | expression             { $item[1] }

   from_clause : /FROM/i  from_item(s /,/)        { $item[2] }
   from_item :   '(' select_query ')' alias 
                                          { { subquery => $item[2], 
                                              alias    =>$item[4]   } }
               | table alias(?)     { join(' ', ($item[1], @{$item[2]})) }

   table :  ...!key_words /\w+/           { $item[2] }
   alias :  ...!key_words /\w+/           { $item[2] }
   
   where_clause :   /WHERE/i where_item more_where_item(?)
                                          { [ $item[2], @{$item[3]} ] }
   more_where_item : /AND/i where_item    { $item[2] }                     
   where_item : expression '=' expression 
                                          { $item[1] . '=' . $item[3] }

   expression :  /(\w+\.\w+|\'.*\'|\d+(\.\d+)?)/   { $item[1] }
               | ...!key_words /\w+/      { $item[2] }
   key_words : /SELECT/i | /FROM/i | /WHERE/i               
   end_of_str: /\z/                              
  });

# Prepare a SELECT query  
my $query = q/SELECT a.au_id, 'xyz', t.*
                FROM authors a, (SELECT * FROM titleauthor) t
               WHERE a.au_id = t.au_id 
                 AND t.title_id = 'BU12321'/;
                 
# Parses the SELECT query with the parser $parser               
my $select = $parser->query($query) or 
   die "***Err: malformed query.";
   
# Dump out the structure generated by the parser   
print Dumper($select);